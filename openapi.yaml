# swagger: "2.0"
openapi: "3.0.0"
info:
  title: GoTerra-Auth
  description: GoTerra Authentication service API
  version: 0.0.1
  
servers:
  - url: http://localhost:8001
    description: test server
    
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    JWTToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Auth:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    User:
      type: object
      properties:
        uid:
          type: string
        password:
          type: string
        email:
          type: string
        admin:
          type: boolean
        active:
          type: boolean
    
paths:
  /auth:
    get:
      summary: base entry point to check service
      description: check that service is live
      responses:
        '200':
          description: service is up
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
                  message:
                    type: string
  /auth/me:
    get:
      security:
        - JWTToken: []
      summary: get user info matching provided authorization
      responses:
        '200':
          description: user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'               
  /auth/login:
    post:
      summary: check credentials
      description: checks user login/password and gets in return a JWT token
      responses:
        '200':
          description: user is authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  apikey:
                    type: string
        '404':
          description: user not found
        '401':
          description: invalid credentials
  
  /auth/api:
    get:
      security:
        - ApiKeyAuth: []
      summary: check api key
      description: checks user api key and gets in return user info
      responses:
        '200':
          description: user key is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
  
  /auth/register:
    post:
      security:
        - JWTToken: []
      summary: create a user [admin]
      description: adds a new user in database
      requestBody:
        description: user info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: user is created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: user identifier in db
                  apikey:
                    type: string
                    description: generated api key for user
        '404':
          description: user identified by token not found
        '401':
          description: invalid token
                  